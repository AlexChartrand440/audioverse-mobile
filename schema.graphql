# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------ 
type Aggregate {
  count: Int!
}

type Attachment implements Node {
  filename: String!

  """In bytes"""
  filesize: String!
  id: ID!
  mimeType: String!
  recording: Recording!
  url: URL!
}

type AudioFile implements Node {
  bitrate: Int!
  duration: Float!
  filename: String!

  """In bytes"""
  filesize: String!
  id: ID!
  mimeType: String!
  recording: Recording!
  url: URL!
}

type AuthenticatedUser {
  sessionToken: String!
  user: User!
}

type AuthenticatedUserPayload {
  authenticatedUser: AuthenticatedUser
  errors: [InputValidationError!]!
}

type Bible implements Node {
  book(id: ID!): BibleBook!
  books: [BibleBook!]!
  id: ID!
  isDramatized: Boolean!
  title: String!
}

type BibleBook implements Node {
  chapter(id: ID!): BibleChapter!
  chapterCount: Int!
  chapters: [BibleChapter!]!
  id: ID!
  isDramatized: Boolean!
  title: String!
}

type BibleChapter implements Node {
  id: ID!
  text: String!
  title: String!
  url: URL!
}

type BibleConnection {
  aggregate: Aggregate
  edges: [BibleEdge!]
  nodes: [Bible!]
  pageInfo: PageInfo!
}

type BibleEdge {
  cursor: String!
  node: Bible!
}

type BlogPost implements Node {
  body: String!
  id: ID!
  image: Image
  title: String!
}

type BlogPostConnection {
  aggregate: Aggregate
  edges: [BlogPostEdge!]
  nodes: [BlogPost!]
  pageInfo: PageInfo!
}

type BlogPostEdge {
  cursor: String!
  node: BlogPost!
}

input BlogPostOrder {
  direction: OrderByDirection!
  field: BlogPostSortableField!
}

"""Properties by which blog post connections can be ordered."""
enum BlogPostSortableField {
  PUBLISHED_AT
}

type Collection implements Node {
  """The canonical HTML path to this resource."""
  canonicalPath: String!

  """The canonical URL to this resource."""
  canonicalUrl: String!
  contentType: CollectionContentType!
  endDate: Date
  id: ID!
  image: Image
  imageWithFallback: Image!
  location: String
  logoImage: Image @deprecated(reason: "Collection.logoImage is replaced with Collection.image")
  logoImageWithFallback: Image! @deprecated(reason: "Collection.logoImageWithFallback is replaced with Collection.imageWithFallback")
  recordings(
    after: String
    first: Int
    orderBy: [RecordingsOrder!]
    presenterId: ID
    sequenceId: ID
    sponsorId: ID

    """The name of the tag to filter the recordings by."""
    tagName: String
  ): RecordingConnection!
  sequences(after: String, first: Int, orderBy: [SequenceOrder!], search: String, sponsorId: ID): SequenceConnection!

  """A shareable short URL to this resource."""
  shareUrl: String!
  sponsor: Sponsor
  startDate: Date
  title: String!
}

type CollectionConnection {
  aggregate: Aggregate
  edges: [CollectionEdge!]
  nodes: [Collection!]
  pageInfo: PageInfo!
}

"""The available types of collections."""
enum CollectionContentType {
  AUDIOBOOK_SERIES
  CONFERENCE
  STORY_PROGRAM
}

type CollectionEdge {
  cursor: String!
  node: Collection!
}

input CollectionsOrder {
  direction: OrderByDirection!
  field: CollectionsSortableField!
}

"""Properties by which collection connections can be ordered."""
enum CollectionsSortableField {
  CREATED_AT
  ID
  TITLE
}

"""Date custom scalar type"""
scalar Date

type Image {
  url(size: Int!): URL!
}

type InputValidationError {
  message: String!
}

"""Supported languages"""
enum Language {
  CHINESE
  ENGLISH
  FRENCH
  GERMAN
  JAPANESE
  RUSSIAN
  SPANISH
}

type MediaFile implements Node {
  bitrate: Int!
  duration: Float!
  filename: String!

  """In bytes"""
  filesize: String!
  id: ID!
  mimeType: String!
  recording: Recording!
  url: URL!
}

type Mutation {
  favoriteRecording(id: ID!): Boolean!
  login(input: UserLoginInput!): AuthenticatedUserPayload!
  loginSocial(input: UserLoginSocialInput!): AuthenticatedUserPayload!
  playlistAdd(input: UserPlaylistAddInput!): UserPlaylist!
  playlistDelete(playlistId: ID!): Boolean!
  playlistRecordingAdd(playlistId: ID!, recordingId: ID!): Boolean!
  playlistRecordingRemove(playlistId: ID!, recordingId: ID!): Boolean!
  playlistUpdate(input: UserPlaylistUpdateInput!, playlistId: ID!): UserPlaylist!
  signup(input: UserSignupInput!): AuthenticatedUserPayload!
  unfavoriteRecording(id: ID!): Boolean!
  updateMyProfile(input: UserUpdateProfileInput!): AuthenticatedUserPayload!

  """
  Sends a reset password email to the user, as the first step in the reset password process.
  """
  userRecover(
    """The email address of the user to recover."""
    email: String!
  ): SuccessPayload!

  """Resets a user's password with a token received from `userRecover`."""
  userReset(
    """New password that will be set as part of the reset password process."""
    password: String!

    """The reset token required to reset the user's password."""
    token: String!
  ): SuccessPayload!
}

interface Node {
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderByDirection {
  ASC
  DESC
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Person implements Node {
  """The canonical HTML path to this resource."""
  canonicalPath: String!

  """The canonical URL to this resource."""
  canonicalUrl: String!
  description: String!
  givenName: String!
  id: ID!
  image: Image
  imageWithFallback: Image!
  name: String!
  photo: Image @deprecated(reason: "Person.photo is replaced with Person.image")
  photoWithFallback: Image! @deprecated(reason: "Person.photoWithFallback is replaced with Person.imageWithFallback")
  recordings(
    after: String
    collectionId: ID
    first: Int
    orderBy: [RecordingsOrder!]
    sequenceId: ID
    sponsorId: ID

    """The name of the tag to filter the recordings by."""
    tagName: String
  ): RecordingConnection!

  """A shareable short URL to this resource."""
  shareUrl: String!
  summary: String!
  surname: String!
  website: String
}

type PersonConnection {
  aggregate: Aggregate
  edges: [PersonEdge!]
  nodes: [Person!]
  pageInfo: PageInfo!
}

type PersonEdge {
  cursor: String!
  node: Person!
}

input PersonsOrder {
  direction: OrderByDirection!
  field: PersonsSortableField!
}

"""The roles a Person can hold."""
enum PersonsRoleField {
  SPEAKER
  WRITER
}

"""Properties by which person connections can be ordered."""
enum PersonsSortableField {
  CREATED_AT
  ID
  NAME
}

type PopularRecording {
  recording: Recording!
  weight: Float!
}

type PopularRecordingConnection {
  aggregate: Aggregate
  edges: [PopularRecordingEdge!]
  nodes: [PopularRecording!]
  pageInfo: PageInfo!
}

type PopularRecordingEdge {
  cursor: String!
  node: PopularRecording!
}

type Query {
  audiobible(id: ID!): Bible
  audiobibles(after: String, first: Int): BibleConnection!

  """Alias for `sequence(id: ID)`"""
  audiobook(id: ID!): Sequence
  audiobooks(after: String, collectionId: ID, first: Int, language: Language!, orderBy: [SequenceOrder!], search: String, sponsorId: ID): SequenceConnection!

  """Alias for `collection(id: ID)`"""
  audiobookSeries(id: ID!): Collection
  audiobookSerieses(after: String, first: Int, language: Language!, orderBy: [CollectionsOrder!], search: String, sponsorId: ID): CollectionConnection!

  """Alias for `recording(id: ID)`"""
  audiobookTrack(id: ID!): Recording
  audiobookTracks(
    after: String
    collectionId: ID
    first: Int
    language: Language!
    orderBy: [RecordingsOrder!]
    presenterId: ID

    """
    `search` will find matching recordings and order the recordings by relevance to the search term. Any `orderBy` arguments provided will be ignored.
    """
    search: String
    sequenceId: ID
    sponsorId: ID

    """The name of the tag to filter the recordings by."""
    tagName: String
  ): RecordingConnection!
  blogPost(id: ID!): BlogPost
  blogPosts(after: String, first: Int, language: Language!, orderBy: [BlogPostOrder!]): BlogPostConnection!
  collection(id: ID!): Collection
  collections(after: String, first: Int, language: Language!, orderBy: [CollectionsOrder!], search: String, sponsorId: ID): CollectionConnection!

  """Alias for `collection(id: ID)`"""
  conference(id: ID!): Collection
  conferences(after: String, first: Int, language: Language!, orderBy: [CollectionsOrder!], search: String, sponsorId: ID): CollectionConnection!
  featuredBlogPosts(after: String, first: Int, language: Language!): BlogPostConnection!
  featuredRecordings(
    after: String
    collectionId: ID
    contentType: RecordingContentType = SERMON
    first: Int
    language: Language!
    presenterId: ID
    sequenceId: ID
    sponsorId: ID

    """The name of the tag to filter the recordings by."""
    tagName: String
  ): RecordingConnection!
  me: AuthenticatedUser

  """Alias for `sequence(id: ID)`"""
  musicAlbum(id: ID!): Sequence
  musicAlbums(after: String, collectionId: ID, first: Int, language: Language!, orderBy: [SequenceOrder!], search: String, sponsorId: ID): SequenceConnection!
  musicBookTags(after: String, first: Int, language: Language!): TagConnection! @deprecated(reason: "Query.musicBookTags will be replaced with a scriptural reference type.")
  musicMoodTags(after: String, first: Int, language: Language!): TagConnection!

  """Alias for `recording(id: ID)`"""
  musicTrack(id: ID!): Recording
  musicTracks(
    after: String
    collectionId: ID
    first: Int
    language: Language!
    orderBy: [RecordingsOrder!]
    presenterId: ID

    """
    `search` will find matching recordings and order the recordings by relevance to the search term. Any `orderBy` arguments provided will be ignored.
    """
    search: String
    sequenceId: ID
    sponsorId: ID

    """The name of the tag to filter the recordings by."""
    tagName: String
  ): RecordingConnection!
  person(id: ID!): Person
  persons(
    after: String
    first: Int
    language: Language!
    orderBy: [PersonsOrder!]
    role: PersonsRoleField
    search: String

    """
    Filters persons by those with published recordings of any of the provided content types.
    """
    withContentTypes: [RecordingContentType!]
  ): PersonConnection!
  popularRecordings(
    after: String
    collectionId: ID
    contentType: RecordingContentType = SERMON
    first: Int
    language: Language!
    presenterId: ID
    sequenceId: ID
    sponsorId: ID

    """The name of the tag to filter the recordings by."""
    tagName: String
  ): PopularRecordingConnection!
  presenters(after: String, first: Int, language: Language!, orderBy: [PersonsOrder!], search: String): PersonConnection! @deprecated(reason: "Query.presenters is replaced with Query.persons(role: SPEAKER, withContentTypes: [SERMON, STORY])")
  recording(id: ID!): Recording
  recordings(
    after: String
    collectionId: ID
    first: Int
    language: Language!
    orderBy: [RecordingsOrder!]
    presenterId: ID

    """
    `search` will find matching recordings and order the recordings by relevance to the search term. Any `orderBy` arguments provided will be ignored.
    """
    search: String
    sequenceId: ID
    sponsorId: ID

    """The name of the tag to filter the recordings by."""
    tagName: String
  ): RecordingConnection!
  sequence(id: ID!): Sequence
  sequences(after: String, collectionId: ID, first: Int, language: Language!, orderBy: [SequenceOrder!], search: String, sponsorId: ID): SequenceConnection!

  """Alias for `sequence(id: ID)`"""
  series(id: ID!): Sequence

  """
  Series is both a singular and plural form. `series` returns a single sequence. `serieses` is an archaic plural form of series used here to avoid `seriess` or some other ugly solution.
  """
  serieses(after: String, collectionId: ID, first: Int, language: Language!, orderBy: [SequenceOrder!], search: String, sponsorId: ID): SequenceConnection!

  """Alias for `recording(id: ID)`"""
  sermon(id: ID!): Recording
  sermons(
    after: String
    collectionId: ID
    first: Int
    language: Language!
    orderBy: [RecordingsOrder!]
    presenterId: ID

    """
    `search` will find matching recordings and order the recordings by relevance to the search term. Any `orderBy` arguments provided will be ignored.
    """
    search: String
    sequenceId: ID
    sponsorId: ID

    """The name of the tag to filter the recordings by."""
    tagName: String
  ): RecordingConnection!
  sponsor(id: ID!): Sponsor
  sponsors(after: String, first: Int, language: Language!, orderBy: [SponsorsOrder!], search: String, withMusic: Boolean): SponsorConnection!
  stories(
    after: String
    collectionId: ID
    first: Int
    language: Language!
    orderBy: [RecordingsOrder!]
    presenterId: ID

    """
    `search` will find matching recordings and order the recordings by relevance to the search term. Any `orderBy` arguments provided will be ignored.
    """
    search: String
    sequenceId: ID
    sponsorId: ID

    """The name of the tag to filter the recordings by."""
    tagName: String
  ): RecordingConnection!

  """Alias for `recording(id: ID)`"""
  story(id: ID!): Recording

  """Alias for `collection(id: ID)`"""
  storyProgram(id: ID!): Collection
  storyPrograms(after: String, first: Int, language: Language!, orderBy: [CollectionsOrder!], search: String, sponsorId: ID): CollectionConnection!

  """Alias for `sequence(id: ID)`"""
  storySeason(id: ID!): Sequence
  storySeasons(after: String, collectionId: ID, first: Int, language: Language!, orderBy: [SequenceOrder!], search: String, sponsorId: ID): SequenceConnection!
  testimonies(after: String, first: Int, language: Language!, orderBy: [TestimoniesOrder!]): TestimonyConnection!
}

type Recording implements Node {
  attachments: [Attachment!]!
  audioFiles: [AudioFile!]!

  """The canonical HTML path to this resource."""
  canonicalPath: String!
  canonicalUrl: URL!
  collection: Collection
  contentType: RecordingContentType!
  copyrightYear: Int
  description: String
  downloadDisabled: Boolean!
  duration: Float!
  id: ID!
  imageWithFallback: Image!
  mediaFiles: [MediaFile!]! @deprecated(reason: "Recording.mediaFiles is replaced with Recording.audioFiles.")
  persons(role: PersonsRoleField): [Person!]!
  presenters: [Person!]! @deprecated(reason: "Recording.presenters is replaced with Recording.persons(role: SPEAKER)")
  recordingDate: Date
  recordingTags(after: String, first: Int): RecordingTagConnection!
  sequence: Sequence
  shareUrl: URL
  sponsor: Sponsor
  title: String!
  transcript: Transcript
  videoFiles: [VideoFile!]!
  viewerHasFavorited: Boolean!
}

type RecordingConnection {
  aggregate: Aggregate
  edges: [RecordingEdge!]
  nodes: [Recording!]
  pageInfo: PageInfo!
}

"""The available types of recordings."""
enum RecordingContentType {
  AUDIOBOOK_TRACK
  MUSIC_TRACK
  SERMON
  STORY
}

type RecordingEdge {
  cursor: String!
  node: Recording!
}

input RecordingsOrder {
  direction: OrderByDirection!
  field: RecordingsSortableField!
}

"""Properties by which recording connections can be ordered."""
enum RecordingsSortableField {
  CREATED_AT
  ID
  PUBLISHED_AT
  RECORDED_AT
  TITLE
}

type RecordingTag {
  tag: Tag!
}

type RecordingTagConnection {
  aggregate: Aggregate
  edges: [RecordingTagEdge!]
  nodes: [RecordingTag!]
  pageInfo: PageInfo!
}

type RecordingTagEdge {
  cursor: String!
  node: RecordingTag!
}

type Sequence implements Node {
  """The canonical HTML path to this resource."""
  canonicalPath: String!

  """The canonical URL to this resource."""
  canonicalUrl: String!
  collection: Collection
  contentType: SequenceContentType!
  description: String!
  id: ID!
  image: Image
  imageWithFallback: Image!
  logoImage: Image @deprecated(reason: "Sequence.logoImage is replaced with Sequence.image")
  logoImageWithFallback: Image! @deprecated(reason: "Sequence.logoImageWithFallback is replaced with Sequence.imageWithFallback")
  recordings(
    after: String
    collectionId: ID
    first: Int
    presenterId: ID
    sponsorId: ID

    """The name of the tag to filter the recordings by."""
    tagName: String
  ): RecordingConnection!

  """A shareable short URL to this resource."""
  shareUrl: String!
  sponsor: Sponsor
  summary: String!
  title: String!
}

type SequenceConnection {
  aggregate: Aggregate
  edges: [SequenceEdge!]
  nodes: [Sequence!]
  pageInfo: PageInfo!
}

"""The available types of sequence."""
enum SequenceContentType {
  AUDIOBOOK
  MUSIC_ALBUM
  SERIES
  STORY_SEASON
}

type SequenceEdge {
  cursor: String!
  node: Sequence!
}

input SequenceOrder {
  direction: OrderByDirection!
  field: SequenceSortableField!
}

"""Properties by which sequence connections can be ordered."""
enum SequenceSortableField {
  CREATED_AT
  ID
  TITLE
}

type Sponsor implements Node & UniformResourceLocatable {
  """The canonical HTML path to this resource."""
  canonicalPath: String!

  """The canonical URL to this resource."""
  canonicalUrl: String!
  collections(after: String, contentType: CollectionContentType = CONFERENCE, first: Int, orderBy: [CollectionsOrder!], search: String): CollectionConnection!
  description: String!
  id: ID!
  image: Image
  imageWithFallback: Image!
  location: String
  logoImage: Image @deprecated(reason: "Sponsor.logoImage is replaced with Sponsor.image")
  logoImageWithFallback: Image! @deprecated(reason: "Sponsor.logoImageWithFallback is replaced with Sponsor.imageWithFallback")
  recordings(
    after: String
    collectionId: ID
    contentType: RecordingContentType = SERMON
    first: Int
    orderBy: [RecordingsOrder!]
    presenterId: ID
    sequenceId: ID

    """The name of the tag to filter the recordings by."""
    tagName: String
  ): RecordingConnection!
  sequences(after: String, collectionId: ID, contentType: SequenceContentType = SERIES, first: Int, orderBy: [SequenceOrder!], search: String): SequenceConnection!

  """A shareable short URL to this resource."""
  shareUrl: String!
  title: String!
  website: String
}

type SponsorConnection {
  aggregate: Aggregate
  edges: [SponsorEdge!]
  nodes: [Sponsor!]
  pageInfo: PageInfo!
}

type SponsorEdge {
  cursor: String!
  node: Sponsor!
}

input SponsorsOrder {
  direction: OrderByDirection!
  field: SponsorsSortableField!
}

"""Properties by which sponsor connections can be ordered."""
enum SponsorsSortableField {
  CREATED_AT
  ID
  TITLE
}

type SuccessPayload {
  errors: [InputValidationError!]!
  success: Boolean!
}

type Tag implements Node {
  id: ID!
  name: String!
}

type TagConnection {
  aggregate: Aggregate
  edges: [TagEdge!]
  nodes: [Tag!]
  pageInfo: PageInfo!
}

type TagEdge {
  cursor: String!
  node: Tag!
}

input TestimoniesOrder {
  direction: OrderByDirection!
  field: TestimoniesSortableField!
}

"""Properties by which testimony connections can be ordered."""
enum TestimoniesSortableField {
  WRITTEN_DATE
}

type Testimony implements Node {
  author: String!
  body: String!
  id: ID!
  writtenDate: Date!
}

type TestimonyConnection {
  aggregate: Aggregate
  edges: [TestimonyEdge!]
  nodes: [Testimony!]
  pageInfo: PageInfo!
}

type TestimonyEdge {
  cursor: String!
  node: Testimony!
}

type Transcript implements Node {
  id: ID!
  text: String!
}

"""Represents a type that can be retrieved by a URL."""
interface UniformResourceLocatable {
  canonicalPath: String!
  canonicalUrl: String!
  shareUrl: String!
}

"""
A field whose value conforms to the standard URL format as specified in RF3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type User implements Node {
  createdAt: Date!
  favoriteRecordings(
    after: String
    collectionId: ID
    first: Int
    orderBy: [RecordingsOrder!]
    presenterId: ID
    sequenceId: ID
    sponsorId: ID

    """The name of the tag to filter the recordings by."""
    tagName: String
  ): RecordingConnection!
  givenName: String!
  id: ID!
  name: String!
  playlist(id: ID!): UserPlaylist
  playlists(after: String, first: Int, language: Language!, orderBy: [UserPlaylistsOrder!]): UserPlaylistConnection!
  surname: String!
}

input UserLoginInput {
  email: String!
  password: String!
}

input UserLoginSocialInput {
  givenName: String
  socialId: String!
  socialName: UserSocialServiceName!
  socialToken: String!
  surname: String
}

type UserPlaylist implements Node {
  id: ID!
  isPublic: Boolean!
  language: Language!
  recordings(
    after: String
    collectionId: ID
    first: Int
    presenterId: ID
    sequenceId: ID
    sponsorId: ID

    """The name of the tag to filter the recordings by."""
    tagName: String
  ): RecordingConnection!
  summary: String!
  title: String!
}

input UserPlaylistAddInput {
  isPublic: Boolean!
  language: Language!
  summary: String
  title: String!
}

type UserPlaylistConnection {
  aggregate: Aggregate
  edges: [UserPlaylistEdge!]
  nodes: [UserPlaylist!]
  pageInfo: PageInfo!
}

type UserPlaylistEdge {
  cursor: String!
  node: UserPlaylist!
}

input UserPlaylistsOrder {
  direction: OrderByDirection!
  field: UserPlaylistsSortableField!
}

"""Properties by which a user's playlists connection can be ordered."""
enum UserPlaylistsSortableField {
  CREATED_AT
  ID
  TITLE
}

input UserPlaylistUpdateInput {
  isPublic: Boolean!
  summary: String
  title: String!
}

input UserSignupInput {
  email: String!
  password: String!
}

"""The supported social login services."""
enum UserSocialServiceName {
  APPLE
  FACEBOOK
  GOOGLE
}

input UserUpdateProfileInput {
  email: String!
  givenName: String!
  password: String
  surname: String!
}

type VideoFile implements Node {
  bitrate: Int!
  container: String!
  duration: Float!
  filename: String!

  """In bytes"""
  filesize: String!
  height: Int!
  id: ID!
  logUrl: URL
  mimeType: String!
  recording: Recording!
  url: URL!
  width: Int!
}
